datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  shadowDatabaseUrl    = env("SHADOW_DATABASE_URL")
  referentialIntegrity = "prisma"
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                      String         @id @default(cuid())
  name                    String
  email                   String         @unique
  password                String
  emailVerificationSentOn DateTime       @default(now())
  emailVerifiedOn         DateTime?
  image                   String?
  createdAt               DateTime       @default(now())
  updatedAt               DateTime       @updatedAt
  accounts                Account[]
  sessions                Session[]
  SolveSession            SolveSession[]
  Problem                 Problem[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model SolveSession {
  id         String    @id @default(cuid())
  userId     String
  createdAt  DateTime  @default(now())
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  Problem    Problem   @relation(fields: [problemId], references: [id])
  problemId  String
  Protocol   Protocol? @relation(fields: [protocolId], references: [id])
  protocolId String?
}

model Problem {
  id           String         @id @default(cuid())
  userId       String
  imageURL     String
  headline     String
  description  String         @db.Text
  background   String         @db.Text
  createdAt    DateTime       @default(now())
  createdBy    User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  SolveSession SolveSession[]
}

model Protocol {
  id                String         @id @default(cuid())
  duration          DateTime
  participantFee    Decimal        @db.Decimal(10, 2)
  judgeFee          Decimal        @db.Decimal(10, 2)
  solvetherFee      Decimal        @db.Decimal(10, 2)
  rewardPool        Decimal        @db.Decimal(10, 2)
  judgeNumber       Int
  participantNumber Int
  audienceAllowed   Boolean
  SolveSession      SolveSession[]
}
